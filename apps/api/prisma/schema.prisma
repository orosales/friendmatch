// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  provider    String   // 'google' or 'facebook'
  email       String   @unique
  name        String
  photoUrl    String?
  verified    Boolean  @default(false)
  interests   String[] // Array of interest strings
  radiusKm    Int      @default(10)
  availability Json?   // JSON object for availability schedule
  location    Json?    // JSON object with lat/lng/geohash
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownedInvites Invite[] @relation("InviteOwner")
  rsvps        RSVP[]
  blockedUsers User[]  @relation("UserBlocking")
  blockedBy    User[]  @relation("UserBlocking")

  @@map("users")
}

model Invite {
  id          String   @id @default(uuid())
  ownerId     String
  title       String
  description String?
  interests   String[] // Array of interest strings
  startTime   DateTime
  endTime     DateTime?
  radiusKm    Int
  visibility  String   // 'public', 'friends', 'private'
  venueId     String?
  maxAttendees Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner User  @relation("InviteOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  rsvps RSVP[]
  venue Venue? @relation(fields: [venueId], references: [id])

  @@map("invites")
}

model RSVP {
  id       String @id @default(uuid())
  userId   String
  inviteId String
  status   String // 'going', 'maybe', 'not_going'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  invite Invite @relation(fields: [inviteId], references: [id], onDelete: Cascade)

  @@unique([userId, inviteId])
  @@map("rsvps")
}

model Venue {
  id           String   @id @default(uuid())
  name         String
  type         String   // 'cafe', 'restaurant', 'library', 'park', etc.
  address      String
  latitude     Float
  longitude    Float
  rating       Float?
  openingHours Json?    // JSON object with opening hours
  phone        String?
  website      String?
  description  String?
  amenities    String[] // Array of amenity strings
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  invites Invite[]

  @@map("venues")
}

model Report {
  id          String   @id @default(uuid())
  reporterId  String
  reportedId  String
  reason      String   // 'spam', 'inappropriate', 'harassment', 'fake', 'other'
  description String?
  status      String   @default('pending') // 'pending', 'reviewed', 'resolved', 'dismissed'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reports")
}
