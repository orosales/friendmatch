generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String             @id @default(uuid())
  provider     String
  email        String             @unique
  name         String
  photoUrl     String?
  verified     Boolean            @default(false)
  radiusKm     Int                @default(10)
  location     Json?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  invites      Invite[]
  rsvps        RSVP[]
  availability UserAvailability[]
  interests    UserInterest[]

  @@map("users")
}

model InterestCategory {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  inviteInterests InviteInterest[]
  userInterests   UserInterest[]

  @@map("interest_categories")
}

model UserInterest {
  id         String           @id @default(uuid())
  userId     String
  interestId String
  createdAt  DateTime         @default(now())
  interest   InterestCategory @relation(fields: [interestId], references: [id], onDelete: Cascade)
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, interestId])
  @@map("user_interests")
}

model UserAvailability {
  id        String   @id @default(uuid())
  userId    String
  dayOfWeek String
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_availability")
}

model Invite {
  id           String           @id @default(uuid())
  ownerId      String
  title        String
  description  String?
  startTime    DateTime
  endTime      DateTime?
  radiusKm     Int
  visibility   String
  venueId      String?
  maxAttendees Int?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  interests    InviteInterest[]
  owner        User             @relation(fields: [ownerId], references: [id])
  venue        Venue?           @relation(fields: [venueId], references: [id])
  rsvps        RSVP[]

  @@map("invites")
}

model InviteInterest {
  id         String           @id @default(uuid())
  inviteId   String
  interestId String
  createdAt  DateTime         @default(now())
  interest   InterestCategory @relation(fields: [interestId], references: [id], onDelete: Cascade)
  invite     Invite           @relation(fields: [inviteId], references: [id], onDelete: Cascade)

  @@unique([inviteId, interestId])
  @@map("invite_interests")
}

model RSVP {
  id        String   @id @default(uuid())
  userId    String
  inviteId  String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invite    Invite   @relation(fields: [inviteId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, inviteId])
  @@map("rsvps")
}

model Venue {
  id           String   @id @default(uuid())
  name         String
  type         String
  address      String
  latitude     Float
  longitude    Float
  rating       Float?
  openingHours Json?
  phone        String?
  website      String?
  description  String?
  amenities    String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  invites      Invite[]

  @@map("venues")
}
